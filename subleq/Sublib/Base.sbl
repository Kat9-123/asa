#Sublib/Symbols.sbl

@Halt [
    W -= W  !IO
]


@Jump _address? [
    W -= W  _address?
]

@J _address? [!Jump _address?]

@Clear a? [
    a?      -= a?
]
@Clr a? [!Clear a? ]

@SubLit a? b? {
    a?      -= literal_pointer
    W       -= W             _fin
    literal_pointer -> b?
    _fin ->
}

@Inc a? [
    a? -= N_ONE
]
@Dec a? [
    a? -= ONE
]

@Copy from? to? [
    !Clr Z
    !Clr to?

    Z -= from?
    to? -= Z
]

@Cpy from? to? [!Copy from? to?]

; a += b
@Add a? b? [
    !Clr Z
    Z -= b?
    a? -= Z
]

@Assign value? target? [
    !Clr Z

    target? -= target?
    Z -= value?
    target -= Z
]




@SubleqDerefA p_a? b? {
    !Copy p_a? p_local
    b? -= (p_local -> 0)
}
@SubleqDerefB a? p_b?{
    !Copy p_a? p_local
    (p_local -> 0) -= a?
}

@SubleqDerefC a? b? p_c? {
    !Copy p_c? p_local
    b? -= a? (p_local -> 0)
}

@AssertEq a? b? {
    !JumpIf::Eq a? b? .fin

    !IO::PrintLit "Assertion failed."
    !Halt

    .fin ->
}


**
    Assumes .repeat exists
    l_start? is inclusive, l_end? is exclusive

    Usage:

    .repeat ->
        ...
    !Repeat 0 16
**
@Repeat l_start? l_end? .loop_addr {
    !Inc i

    !JumpIf::Geq i END .reset_and_finish

    !J .loop_addr


    i -> l_start?
    BASE -> l_start?
    END -> l_end?
    .reset_and_finish ->
    !Copy BASE i

}
