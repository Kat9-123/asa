**
 ; Simulation of 'normal' control flow like in normal programming languages
 ; includes the constructs: If, While, IfElse
**

#Sublib



@If value? body? {
    value? -= ZERO .false
    body?
    .false ->
}

@_IfBase m_conditional? s_body? {
    !Flip (m_conditional?) .false
    s_body?
    .false ->
}

@IfElse value? s_true? s_false? {
    value? -= ZERO .false
    s_true?
    !J .fin


    .false ->
    s_false?

    .fin ->
}

@_IfElseBase m_conditional? s_true? s_false? {

    m_conditional? .true

    s_false?

    !J .fin

    .true ->

    s_true?

    .fin ->
}


@_WhileBase m_conditional? s_body? {

    .repeat ->
        s_body?
    m_conditional? .repeat

}

@JIF:GeZero a? .target? {
    a -= ZERO .fin
    !J .target?
    .fin ->
}

@While::Ge a? b? s_body? {
    !_WhileBase (!JumpIf::Ge a? b? ) { s_body? }
}

@If::GeZero a? s_body? {
    !_IfBase (!JIF:GeZero a?) { s_body? }
}

@While::GeZero A? s_body? {
.repeat ->
    A? -= ZERO .fin

    s_body?

    !J .repeat
.fin ->
}


@If::Eq a? b? s_body? { !_IfBase (!JumpIf::Eq a? b?) s_body? }
@If::Geq a? b? s_body? { !_IfBase (!JumpIf::Geq a? b?) s_body? }
@If::Leq a? b? s_body? { !_IfBase (!JumpIf::Leq a? b?) s_body? }



@While::Neq a? b? s_body? {
    !_WhileBase (!JumpIf::Neq a? b?) s_body?
}



@If::Neq a? b? s_body? {
    !JumpIf::Eq a? b? .false
    s_body?
    .false ->
}


@IfElse::Eq a? b? s_true? s_false? {
    !_IfElseBase (!Eq a? b? ) s_true? s_false?
}
@IfElse::Neq a? b? true? false? {
    !_IfElseBase (!JumpIf::Eq a? b? ) true? false?
}


@If::Ge a? b? s_body? [ !_IfBase (!JumpIf::Ge a? b?) s_body? ]



@Eq a? b? .addr? [!JumpIf::Eq a? b? .addr?]