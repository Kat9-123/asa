**
 ; Simulation of 'normal' control flow like in normal programming languages
 ; includes the constructs: If, While, IfElse
**
#sublib



@IfTrue value? body? {
   value? -= ZERO .false
   body?
   .false ->
}

@IfFalse value? s_body? {
    value? -= ZERO .body
    !J .fin

    .body ->
        s_body?
    .fin ->
}

@IfTrueElse value? s_true? s_false? {
    value? -= ZERO .false
    s_true?
    !J .fin


    .false ->
    s_false?

    .fin ->
}



@If m_conditional? s_body? {
    !Flip (m_conditional?) .false
    s_body?
    .false ->
}



@IfElse m_conditional? s_true? s_false? {

    m_conditional? .true

    s_false?

    !J .fin

    .true ->

    s_true?

    .fin ->
}


@While m_conditional? s_body? {

    .repeat ->
        s_body?
    m_conditional? .repeat

}


@WhileTrue A? s_body? {
.repeat ->
    A? -= ZERO .fin

    s_body?

    !J .repeat
.fin ->
}


@Eq  a? b? .addr? [!JumpIf::Eq  a? b? .addr?]
@Neq a? b? .addr? [!JumpIf::Neq a? b? .addr?]

@Leq a? b? .addr? [!JumpIf::Leq a? b? .addr?]
@Geq a? b? .addr? [!JumpIf::Geq a? b? .addr?]

@Le  a? b? .addr? [!JumpIf::Le  a? b? .addr?]
@Ge  a? b? .addr? [!JumpIf::Ge  a? b? .addr?]